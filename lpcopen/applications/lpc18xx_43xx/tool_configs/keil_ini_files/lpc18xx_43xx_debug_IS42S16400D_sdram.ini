
FUNC void SDRAM_Setup (void) {
// Pin setup
// Data Lines 0..31
_WDWORD(0x4008609C, 0x000000F3);
_WDWORD(0x400860A0, 0x000000F3);
_WDWORD(0x400860A4, 0x000000F3);

_WDWORD(0x400860A8, 0x000000F3);
_WDWORD(0x400860AC, 0x000000F3);
_WDWORD(0x400860B0, 0x000000F3);
_WDWORD(0x400860B4, 0x000000F3);
_WDWORD(0x400860B8, 0x000000F3);

_WDWORD(0x40086290, 0x000000F2);
_WDWORD(0x40086294, 0x000000F2);
_WDWORD(0x40086298, 0x000000F2);
_WDWORD(0x4008629C, 0x000000F2);
_WDWORD(0x40086280, 0x000000F2);
_WDWORD(0x40086284, 0x000000F2);
_WDWORD(0x40086288, 0x000000F2);
_WDWORD(0x4008628C, 0x000000F2);

_WDWORD(0x40086124, 0x000000F3);
_WDWORD(0x40086128, 0x000000F3);
_WDWORD(0x4008612C, 0x000000F3);
_WDWORD(0x40086130, 0x000000F3);
_WDWORD(0x40086134, 0x000000F3);

_WDWORD(0x40086080, 0x000000F2);
_WDWORD(0x40086084, 0x000000F2);
_WDWORD(0x40086088, 0x000000F2);

_WDWORD(0x40086120, 0x000000F3);
_WDWORD(0x4008611C, 0x000000F3);

_WDWORD(0x40086118, 0x000000F2);
_WDWORD(0x40086108, 0x000000F2);
_WDWORD(0x40086104, 0x000000F2);
_WDWORD(0x40086100, 0x000000F2);

_WDWORD(0x40086320, 0x000000F1);
_WDWORD(0x4008631C, 0x000000F1);

_WDWORD(0x400866C0, 0x000000F2);
_WDWORD(0x400866BC, 0x000000F2);

_WDWORD(0x40086700, 0x000000F3);
_WDWORD(0x40086704, 0x000000F3);
_WDWORD(0x40086708, 0x000000F3);
_WDWORD(0x4008670C, 0x000000F3);
_WDWORD(0x40086710, 0x000000F3);
_WDWORD(0x40086510, 0x000000F3);
_WDWORD(0x40086090, 0x000000F3);

_WDWORD(0x40086318, 0x000000F1);

_WDWORD(0x400866B4, 0x000000F2);
_WDWORD(0x400866A8, 0x000000F2);

_WDWORD(0x40086324, 0x000000F3);
_WDWORD(0x40086098, 0x000000F3);
_WDWORD(0x40086310, 0x000000F3);
_WDWORD(0x40086314, 0x000000F3);
_WDWORD(0x4008632C, 0x000000F3);
_WDWORD(0x40086330, 0x000000F3);
_WDWORD(0x40086328, 0x000000F3);

_WDWORD(0x40086680, 0x000000F2);

_WDWORD(0x40086734, 0x000000F3);
_WDWORD(0x4008608C, 0x000000F3);
_WDWORD(0x40086090, 0x000000F3);
_WDWORD(0x40086094, 0x000000F3);
_WDWORD(0x40086098, 0x000000F3);

// Configure CLK0 pin as EMC SDRAM CLK 0
_WDWORD(0x40086C00, 0x000000F0);
_WDWORD(0x40086C04, 0x000000F0);
_WDWORD(0x40086C08, 0x000000F0);
_WDWORD(0x40086C0C, 0x000000F0);

_WDWORD(0x40086344, 0x000000F3);
_WDWORD(0x40086348, 0x000000F3);
_WDWORD(0x40086340, 0x000000F3);
_WDWORD(0x40086680, 0x000000F2);
_WDWORD(0x4008674C, 0x000000F3);

// Configure EMC delays
_WDWORD(0x40086D00, 0x00006666); // EMCCLKDELAY

// Initialize EMC
_WDWORD(0x40005000, 0x00000001); // CONTROL=1 = Enable EMC
_WDWORD(0x40005008, 0x00000000); // CONFIG=0
_WDWORD(0x40005100, 0x00001280); // DYNAMICCONFIG0
_WDWORD(0x40005140, 0x00001280); // DYNAMICCONFIG2
_WDWORD(0x40005104, 0x00000303); // DYNAMICRASCAS0
_WDWORD(0x40005144, 0x00000303); // DYNAMICRASCAS2

_WDWORD(0x40005028, 0x00000001); // DYNAMICREADCONFIG

_WDWORD(0x40005030, 0x00000001); // DYNAMICRP
_WDWORD(0x40005034, 0x00000003); // DYNAMICRAS
_WDWORD(0x40005038, 0x00000005); // DYNAMICREX
_WDWORD(0x4000503C, 0x00000000); // DYNAMICAPR
_WDWORD(0x40005040, 0x00000004); // DYNAMICDAL
_WDWORD(0x40005044, 0x00000001); // DYNAMICWR
_WDWORD(0x40005048, 0x00000005); // DYNAMICRC
_WDWORD(0x4000504C, 0x00000005); // DYNAMICRFC
_WDWORD(0x40005050, 0x00000005); // DYNAMICXSR
_WDWORD(0x40005054, 0x00000001); // DYNAMICRRD
_WDWORD(0x40005058, 0x00000001); // DYNAMICMRD

_WDWORD(0x40005020, 0x00000183); // DYNAMICCONTROL - NOP
_WDWORD(0x40005020, 0x00000103); // DYNAMICCONTROL - PRECHARGE_ALL

_WDWORD(0x40005024, 0x00000002); // DYNAMICREFRESH = 2
_WDWORD(0x40005024, 0x00000032); // DYNAMICREFRESH = 50

_WDWORD(0x40005020, 0x00000083); // DYNAMICCONTROL - MODE

_RDWORD(0x28006600); // Write 16-bit SDRAM Mode register burst 8

_WDWORD(0x40005020, 0x00000000); // DYNAMICCONTROL = 0

_WDWORD(0x40005100, 0x00081280); // DYNAMICCONFIG0
_WDWORD(0x40005120, 0x00081280); // DYNAMICCONFIG0
_WDWORD(0x40005140, 0x00081280); // DYNAMICCONFIG2
_WDWORD(0x40005160, 0x00081280); // DYNAMICCONFIG2
}

FUNC void Setup (unsigned int region) {
  region &= 0xFF000000;
  SP = _RDWORD(region);                          // Setup Stack Pointer
  PC = _RDWORD(region + 4);                          // Setup Program Counter
  _WDWORD(0xE000ED08, region);                   // Setup Vector Table Offset Register
}

SDRAM_Setup();
LOAD %L INCREMENTAL
Setup(0x28000000);                                             // Setup for Running

g, main
